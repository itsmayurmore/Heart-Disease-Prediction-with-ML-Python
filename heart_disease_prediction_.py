# -*- coding: utf-8 -*-
"""Heart Disease Prediction .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TkXEtBKFfx39F0rOCxdzRk4wr9PQn-fY

##**Import Libraries**
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

"""##**Load the Data**"""

from google.colab import files
uploaded = files.upload()

"""##**Store the data into a variable**"""

df = pd.read_csv("heart.csv")

"""##**Print First 5 rows of data**"""

df.head()

"""##**Get the Shape of Data**"""

df.shape

"""##**Count the null or empty value in each column**"""

df.isna().sum()

"""##**Another way to check null or missing values**"""

df.isnull().values.any()

"""##**View some basic statistics**"""

df.describe()

"""##**Get the count of the number of patients with and without heart disease**"""

df['target'].value_counts()

"""##**Visualize the count**"""

sns.countplot(df['target'])

"""###**Look at the number of people with disease that exceed the number of people without disease**"""

#Visualize the count
sns.countplot(x='age' , hue = 'target',data=df,palette='colorblind',edgecolor=sns.color_palette('dark',n_colors=1))

#Get the correlation of the columns
df.corr()

#Visualize the data
plt.figure(figsize=(7,7))
sns.heatmap(df.corr(),annot=True,fmt='.0%')

"""##**Split the data into feature data and target data**"""

X = df.iloc[:,:-1].values
Y= df.iloc[:,-1].values

"""##**Split the data into 75% training data set and 25% testing data set**"""

from sklearn.model_selection import train_test_split
X_train , X_test , Y_train , Y_test = train_test_split(X,Y ,test_size=0.25 ,stratify=Y, random_state = 2)

"""##**Features Scaling**

**Scale the values in the data to be values between 0 and 1 inclusive**
"""

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""##**Training the LogisticRegression model with training data**"""

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train,Y_train)

"""##**Model Evaluation**

**Accuracy Score**
"""

from sklearn.metrics import accuracy_score
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print("Accuracy on Training Data: ",training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print("Accuracy on Testing Data: ",test_data_accuracy)

"""##**Building Prediction System**"""

input_data=(59,1,0,135,234,0,1,161,0,0.5,1,0,3)

#Changing the input data into numpy array
input_data_narray= np.asarray(input_data)

#reshaping the numpy array and predicting for only on instance
input_data_reshape = input_data_narray.reshape(1,-1)

prediction = model.predict(input_data_reshape)
print(prediction)

if(prediction[0] == 0):
  print("The Person does not have any Heart Disease")
else:
  print("Person has Heart Disease !")

"""##**Credits**

**Created By:- Mayur Mahesh More**
"""